/*
  ============================================
  Hero Section (Why TPnD Matters)
  ============================================
  - Showcases a gradient background with fade-in and a glitch heading.
*/
.hero-section {
  padding: 60px 20px;
  background: linear-gradient(135deg, #240046, #6a0dad);
  color: #ffffff;
  text-align: center;

  /* Begin at opacity:0 for a fade-in effect triggered by JS or scroll events */
  opacity: 0;
  transition: opacity 1.5s ease-in-out;
}

/* Class added by JS to fade the section into view */
.hero-section.visible {
  opacity: 1;
}

/* Container for narrower text columns, centered content */
.hero-section .container {
  max-width: 800px;
  margin: 0 auto;
}

/*
  ============================================
  Paragraph Text
  ============================================
  - Slightly larger font, easy to read. 
*/
.hero-section p {
  font-size: 1.2rem;  /* A bit bigger for hero text */
  line-height: 1.8;   /* Roomy line spacing */
  margin-bottom: 20px;
  color: #dddddd;     /* Subtle contrast against the background */
}

/*
  ============================================
  Glitch Heading
  ============================================
  - Large glitch effect using pseudo-elements that animate
    offset and clip rect transformations for a "flicker."
*/
.glitch {
  position: relative;
  display: inline-block;
  font-size: 3rem;
  font-weight: bold;
  text-transform: uppercase;
  text-align: center;

  /* A neon-like shadow behind the text for that futuristic vibe */
  text-shadow:
    0 0 8px rgba(106, 13, 173, 0.8),
    0 0 16px rgba(106, 13, 173, 0.6);
}

/* 
  Pseudo-elements for glitch layers:
  - "Magenta" offset on ::before
  - "Cyan" offset on ::after
*/
.glitch::before,
.glitch::after {
  content: attr(data-text);     /* Use the data-text attribute from HTML */
  position: absolute;
  left: 0;
  width: 100%;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);       /* Initially clipped out */
}

/* Magenta glitch top layer */
.glitch::before {
  text-shadow: -2px 0 #ff00c1;
  top: 0;
  color: #fff;
  z-index: 1;
  animation: glitch-top 2.5s infinite linear alternate-reverse;
}

/* Cyan glitch bottom layer */
.glitch::after {
  text-shadow: -2px 0 #00fff9;
  top: 0;
  color: #fff;
  z-index: 2;
  animation: glitch-bottom 2.5s infinite linear alternate-reverse;
}

/*
  ============================================
  Glitch Keyframes
  ============================================
  - Animations for top/bottom layers, shifting 
    clip rect & transform to simulate random flickers.
*/
@keyframes glitch-top {
  0% {
    clip: rect(0, 9999px, 0, 0);
    transform: translate(0, 0);
  }
  10% {
    clip: rect(10px, 9999px, 40px, 0);
    transform: translate(-5px, -5px);
  }
  20% {
    clip: rect(10px, 9999px, 80px, 0);
    transform: translate(5px, -1px);
  }
  30% {
    clip: rect(40px, 9999px, 90px, 0);
    transform: translate(-3px, 3px);
  }
  40% {
    clip: rect(20px, 9999px, 30px, 0);
    transform: translate(2px, -2px);
  }
  50% {
    clip: rect(0, 9999px, 0, 0);
    transform: translate(0, 0);
  }
  100% {
    clip: rect(0, 9999px, 0, 0);
    transform: translate(0, 0);
  }
}

@keyframes glitch-bottom {
  0% {
    clip: rect(80px, 9999px, 90px, 0);
    transform: translate(0, 0);
  }
  10% {
    clip: rect(0, 9999px, 30px, 0);
    transform: translate(3px, 3px);
  }
  20% {
    clip: rect(60px, 9999px, 80px, 0);
    transform: translate(-3px, 3px);
  }
  30% {
    clip: rect(40px, 9999px, 60px, 0);
    transform: translate(2px, -3px);
  }
  40% {
    clip: rect(20px, 9999px, 60px, 0);
    transform: translate(-1px, 2px);
  }
  50% {
    clip: rect(0, 9999px, 0, 0);
    transform: translate(0, 0);
  }
  100% {
    clip: rect(60px, 9999px, 80px, 0);
    transform: translate(0, 0);
  }
}
